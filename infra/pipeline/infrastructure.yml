AWSTemplateFormatVersion: 2010-09-09
Description: A Java SpringBoot application deployed with ECS with CodeBuild/Deploy/Pipeline
Parameters:
  ProjectName:
    Type: String
  MavenProjectName:
    Type: String
  ImageTag:
    Type: String
  ApplicationPort:
    Type: String
    Default: 8080
  DesiredCount:
    Type: String
    Default: 1
  AlbPort:
    Type: String
    Default: 80

Resources:

  ##########################
  # Network
  ##########################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatPublicIP
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatPublicIP.AllocationId

  NatPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ##########################
  # ALB
  ##########################

  ALBSecurityGroup:
    Properties:
      GroupDescription: allow access to ALB from internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AlbPort
          ToPort: !Ref AlbPort
          CidrIp: 0.0.0.0/0
    Type: AWS::EC2::SecurityGroup

  ApplicationLoadBalancer:
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2] # Should be public
      SecurityGroups:
        - !Ref ALBSecurityGroup
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

  ALBListener:
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: !Ref AlbPort
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener

  ALBTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckPath: /actuator/health
      Port: !Ref ApplicationPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip # for awsvpc mode
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup


  ALBTargetGroup2:
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckPath: /actuator/health
      Port: !Ref ApplicationPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip # for awsvpc mode
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  ##########################
  # ECS
  ##########################

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  EcsFargateSecurityGroup:
    Properties:
      GroupDescription: allow access to ECS from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
    Type: AWS::EC2::SecurityGroup

  EcsFargateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/fargate/${MavenProjectName}

  EcsFargateTaskDefinition:
    Description: ECS Task Definition
    Properties:
      NetworkMode: awsvpc
      Family: !Ref MavenProjectName
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole # Fargate requires task definition to have execution role ARN to support ECR images
      TaskRoleArn: !Ref ECSTaskExecutionRole
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref MavenProjectName
          Image: !Sub '467420073914.dkr.ecr.eu-west-1.amazonaws.com/${MavenProjectName}:${ImageTag}'
          Environment:
            - Name: SERVER_PORT
              Value: !Ref ApplicationPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref EcsFargateLogGroup
              awslogs-stream-prefix: oam-ecs
          PortMappings:
            - ContainerPort: !Ref 'ApplicationPort'
    Type: AWS::ECS::TaskDefinition

  EcsFargateCluster:
    Description: ECS Cluster
    Properties:
      ClusterName: !Ref 'MavenProjectName'
    Type: AWS::ECS::Cluster

  EcsFargateService:
    Description: ECS Service
    Properties:
      ServiceName: !Ref 'MavenProjectName'
      Cluster: !Ref 'EcsFargateCluster'
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup # loadBalancerName and targetGroupArn cannot both be specified. You must specify either a loadBalancerName or a targetGroupArn.
          #LoadBalancerName: !Ref 'LoadBalancerName'
          ContainerPort: !Ref 'ApplicationPort'
          ContainerName: !Ref 'MavenProjectName'
      NetworkConfiguration:
        AwsvpcConfiguration:
          #AssignPublicIp: ENABLED # unless a NAT / Route needs to be opened to ECR
          SecurityGroups:
            - !Ref 'EcsFargateSecurityGroup'
          Subnets: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
      TaskDefinition: !Ref 'EcsFargateTaskDefinition'
    DependsOn: ALBListener # unless "The target group does not have an associated load balancer"
    Type: AWS::ECS::Service

  ###############
  # VPC Endpoints
  ###############

  VPCEndpointSecurityGroup:
    Description: Security Group to allow use of VPC Endpoints. https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group to allow use of VPC Endpoints."
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: HTTPS
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/0
    Type: AWS::EC2::SecurityGroup

  EcrPrivateVPCEndpoint1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      PrivateDnsEnabled: True
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  EcrPrivateVPCEndpoint2:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      PrivateDnsEnabled: True
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  # Enables CloudWatch logging.
  LogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: !Ref VPC
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

Outputs:
  LoadBalancerName:
    Value: !GetAtt 'ApplicationLoadBalancer.LoadBalancerName'
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerName"
  LoadBalanderDNSName:
    Value: !GetAtt 'ApplicationLoadBalancer.DNSName'
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalanderDNSName"
  TargetGroupName:
    Value: !GetAtt 'ALBTargetGroup.TargetGroupName'
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroupName"
  TargetGroup2Name:
    Value: !GetAtt 'ALBTargetGroup2.TargetGroupName'
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroup2Name"
  EcsFargateService:
    Value: !GetAtt 'EcsFargateService.Name'
    Export:
      Name: !Sub "${AWS::StackName}-EcsFargateService"
  EcsFargateCluster:
    Value: !Ref EcsFargateCluster
    Export:
      Name: !Sub "${AWS::StackName}-EcsFargateCluster"
